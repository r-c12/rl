Ex No: 01
INSTALLING R AND BASIC R OPERATIONS 

CODING

1. Sequence Creation:
seq(20:500)

2. Character Vectors:
a <- c("Hello World")
a

3. Numeric Vectors and Operations:
x <- c(1:10)
x
x^x
mode(x)

4. Matrix Creation:dim(x) <- c(2, 5)
x
mode(x)

5. Character and Logical Vectors:
x <- c("Hello", "World")
mode(x)
x <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE)
mode(x)

6. List Creation:
x <- list("R", "12345", FALSE)
mode(x)

7. Basic Statistical Calculations:
x <- c(20:30)
mean(x)
median(x)

8. Extending Vectors:
x <- c(1:10)
x <- c(x, 11:15)
x

9. Data Frame Creation:
subject <- c("Python", "Data structure", "Mathematics", "DBMS", "Software Engineering", "C Lab", "DBMS Lab")
scores <- c(96, 90, 99, 100, 98, 100, 100)
sem_marks <- data.frame(subject, scores)
sem_marks

10. Reading CSV Data:
setwd("D:/math r")
Data <- read.csv("Sample mean.csv")
Data

========================================================================================================================================

Ex No: 02
GETTING USED TO R

CODING

1. R program to rename a data frame:

df <- data.frame(row1 = 0:2, row2 = 3:5, row3 = 6:8)
print("Original Data Frame")
print(df)

[1] "Original Data Frame"
row1 row2 row3
1 0 3 6
2 1 4 7
3 2 5 8

#Renaming columns
print("Modified Data Frame")
names(df)[names(df) == "row2"] <- "two"
print(df)

[1] "Modified Data Frame"
row1 two row3
1 0 3 6
2 1 4 7
3 2 5 8

names(df)[names(df) == "row3"] <- "third"
print(df)

row1 two third
1 0 3 6
2 1 4 7
3 2 5 8


2. R Program to Add Column in a Data Frame:
df <- data.frame(col1 = 0:2, col2 = 3:5, col3 = 6:8)
print("Original Data Frame") print(df)

[1] "Original Data Frame"
col1 col2 col3
1 0 3 6
2 1 4 7
3 2 5 8

# Adding another column
df[["col4"]] <- c(9, 10, 11)
print(df)

col1 col2 col3 col4
1 0 3 6 9
2 1 4 7 10
3 2 5 8 11

# Assign a value NA to the data frame column 5

df$col5 <- NA
print(df)
col1 col2 col3 col4 col5
1 0 3 6 9 NA
2 1 4 7 10 NA
3 2 5 8 11 NA

# Updating Values of column added:
df[["col5"]] <- df[["col1"]] + df[["col2"]] print("Modified Data Frame") print(df)
[1] "Modified Data Frame"

col1 col2 col3 col4 col5
1 0 3 6 9 3
2 1 4 7 10 5
3 2 5 8 11 7

# Removing Column
df[["col5"]] <- NULL
print(df)

col1 col2 col3 col4
1 0 3 6 9
2 1 4 7 10
3 2 5 8 11

# Removing two columns
df <- df[-c(1, 3)]
print(df)
col2 col4
1 3 9
2 4 10
3 5 11

df<-data.frame(row1=0:2,row2=3:5,row3=6:8,row4=9:11,row5=12:14)
print(df)

row1 row2 row3 row4 row5
1 0 3 6 9 12
2 1 4 7 10 13
3 2 5 8 11 14

df<-subset(df,select=-c(row1,row2))
print("Modified Data Frame")
print(df)

[1] "Modified Data Frame"
row3 row4 row5
1 6 9 12
2 7 10 13
3 8 11 14

========================================================================================================================================

Ex No: 03
VISUALIZING DATA

CODING

1. Create a pie chart
g<-c(10,30,25,15,20)
labels<-c("Mumbai","Chenai","Madurai","Andrapradesh","Pune")
piepercent<-round(100*g/sum(g),1)
pie(g,labels,main="City pie Chart",col=rainbow(length(g)))
legend("topright",c("Mumbai","Chenai","Madurai","Andrapradesh","Pune"),cex=0.5,fill=rainbo
w(length(g)))


2. R program to create a 3D pie chart:
g<-c(10,30,25,15,20)
l<-c("Mumbai","Chenai","Madurai","Andrapradesh","Pune")
piepercent<-round(100*g/sum(g),1)
pie3D(g,labels=piepercent,main="City pie Chart",col=rainbow(length(g)))
legend("topright",c("Mumbai","Chenai","Madurai","Andrapradesh","Pune"),cex=0.5,fill=rainbo
w(length(g)))

3. R program to create a Line chart:
v<-c(10,20,30,40)
t<-c(22,19,36,19,23)
m<-c(25,14,16,34,29)
plot(v,type="o",col="green",xlab="Month",ylab="Article written", main= "Ariticle Written
chart")
lines(t,type="o",col="blue")
lines(m,type="o",col="red")

4. R program to create a Bar chart:
colors=c("green","yellow","violet")
months<-c("Mar","Apr","May","Jun","Jul")
regions<-c("East","West","North")
values<-matrix(c(2,9,3,11,9,4,8,7,3,12,5,2,8,10,11), nrow=3,ncol=5,byrow=TRUE)
barplot(values,main="Tottal Revenue",names.arg=months, xlab="Month", ylab="Revenue",
col=colors, beside=TRUE)
legend("topleft",regions,cex=0.7,fill=colors)

========================================================================================================================================

Ex No: 04 PLOTTING DATA

CODING

BOX PLOT

#creating a dataset
input<-mtcars[,c('mpg','cyl')]
print(head(input))

#create the box plot
data(mtcars)
boxplot(disp~gear,data=mtcars,
main="Displacement by gear",
xlab="gear",
ylab="Displacement")

#Boxplot using notch and customized asthetics
data(mtcars)
my_colors<-c("#FFA500","#008000","#1E90FF","#FF1493")
boxplot(disp~gear,data=mtcars,
main="Displacement by gear",
xlab="Gear",ylab="Displacement",
col=my_colors,borders="black",
notch=TRUE,notchwidth=0.5,
medcol="white",whiskol="black",
boxwex=0.5,outpch=19,
outcol="black")
legend("topright",legend=unique(mtcars$year),fill=my_colors,border="black",title="Gear")

#Multiple boxplot
data(mtcars)
variables <- c("mpg", "disp", "hp", "wt")
par(mfrow = c(1, length(variables)))
for (var in variables) {
boxplot(get(var) ~ gear, data = mtcars,
main = paste("Box plot of", var),
xlab = "Gear",
ylab = var,
col = "skyblue",
border = "black",
notch = TRUE,
notchwidth = 0.5,
medcol = "white",
whiskcol = "black",
boxwex = 0.5,
outpch = 19,
outcol = "black")
}
par(mfrow = c(1, 1)) # Reset the plotting layout to default

HISTOGRAM
v<-c(19,23,11,5,16,21,32,14,19,27,39)
hist(v,xlab="No of articles",col="green",
border="black",xlim=c(0,50),
ylim=c(0,5),breaks=5)

#Histogram using non uniform width
v<-c(19,23,11,5,16,21,32,14,19,27,39,120,40,70,90)
hist(v,xlab="Weight",ylab="Frequency",
xlim=c(50,100),
col="darkmagenta",border="pink",
breaks=c(5,55,60,70,75,80,100,140))


========================================================================================================================================


Ex No: 05 MEASURES OF CENTRAL TENDENCY

CODING

#Mean and Median
x<-c(3,7,5,13,20,23,39,23,40,23,14,12,56,23)
print(mean(x))
print(median(x))

#Multiple mode values
x<-c(3,7,5,13,20,23,39,23,40,23,14,12,56,23,29,56,37,45,1,25,8,56,56)
y<-table(x)
print(y)
m<-names(y)[which(y==max(y))]
print(m)

#variance list=c(2,4,4,4,5,5,7,9)
print(var(list))

#standard deviation
list=c(290,124,127,899)
print(sd(list))


========================================================================================================================================


Ex No: 08 NORMAL DISTRIBUTION


CODING
1) dnorm(c(0,1,2,3,4),mean = 2,sd = 3)
[1] 0.1064827 0.1257944 0.1329808 0.1257944 0.1064827

2) dnorm(c(0,1,0),mean = c(1,-1,0),sd=c(2,0.5,1))
[1] 0.1760326634 0.0002676605 0.3989422804

3) x = seq(-4,4,by=0.2)
y = dnorm(x,mean=0,sd=1)
plot(x,y,type='l')

4) x = seq(from = -5,to = 5,by = 0.05)
norm_dat_1 = data.frame(dist = "N(0,1)",x=x,pdf = dnorm(x))
norm_dat_2 = data.frame(dist = "N(1,4)",x=x,pdf = dnorm(x,1,2))
norm_dat_3 = data.frame(dist = "N(-1,0.25)",x=x,pdf = dnorm(x,-1,0.5))
norm_dat = rbind(norm_dat_1,norm_dat_2,norm_dat_3)
ggplot(norm_dat)+geom_line(aes(x=x,y=pdf,color=dist))

5) pnorm(1.25)
[1] 0.8943502

6) 1 - pnorm(1.25)
[1] 0.1056498

7) x = seq(-4,4,by=0.2)
y = pnorm(x,mean=0,sd=1)
plot(x,y,type='s')

8) hist(y,col="steelblue",main="PNORM")


========================================================================================================================================


Ex No:6
Binomial Distribution

CODE & OUTPUT:
• To find probability at a particular value for a data that follows binomial distribution

1) dbinom(3,6,0.5)

2) sum(dbinom(3:6,6,0.5))

3) dbinom(4,15,0.3)

4) sum(dbinom(0:8,15,0.2))

• To find the cumulative probability of a data that follows binomial distribution till a given value

7) pbinom(8,15,0.2)-pbinom(7,15,0.2)

8) sum(dbinom(0:8,15,0.2))-sum(dbinom(0:7,15,0.2))


========================================================================================================================================


Ex No:7
Poisson Distribution

Coding

1. Calculating CDF for x = 1
pnorm(1, mean = 0, sd = 1)
[1] 0.8413447

2. Calculating CDF for x = 0
pnorm(0, mean = 0, sd = 1)
[1] 0.5
pnorm(0, mean = 1, sd = 2)
[1] 0.3085375
pnorm(0) # cdf at 0 of standard normal
[1] 0.5

3. Visualizing the cdf
q <- seq(from = -5, to = 5, by = 0.1)
norm_dat <- data.frame(q = q, cdf = pnorm(q))
ggplot(norm_dat) + geom_line(aes(x = q, y = cdf))

4. Inverse function of pnorm()
pnorm(qnorm(c(0.5,0.7)))
[1] 0.5 0.7
qnorm(0.5, mean = 1, sd = 2)
[1] 1
qnorm(0.5)
[1] 0

5. Visualize the shape of the quantile function
p <- seq(from = 0.01, to = 0.99, by = 0.01)
norm_dat <- data.frame(p = p, quantile = qnorm(p))
ggplot(norm_dat) + geom_line(aes(x = p, y = quantile))


========================================================================================================================================


Ex No:10
Testing of hypothesis ( t-test )

CODE & OUTPUT

1)
sample_data <- c(12, 14, 15, 17, 19, 20, 22, 25, 28, 30)
hypothesized_mean <- 18
t_test_result <- t.test(sample_data, mu = hypothesized_mean)
print(t_test_result)
OUTPUT
One Sample t-test
data: sample_data
t = 0.64774, df = 9, p-value = 0.5337
alternative hypothesis: true mean is not equal to 18
95 percent confidence interval:
16.24831 23.15169
19.7

2)
apple_weights <- c(140, 152, 145, 159, 162, 151, 148, 146, 157, 161, 143, 137, 154, 167, 149, 144, 156, 150, 165, 163)
known_mean <- 150
t_test_result <- t.test(apple_weights, mu = known_mean)
print(t_test_result)
OUTPUT
data: apple_weights
t = 1.7962, df = 19, p-value = 0.08822
alternative hypothesis: true mean is not equal to 150
95 percent confidence interval:
148.3944 157.3056
sample estimates:
mean of x
152.85

3)
group1 <- c(12, 15, 17, 19, 22, 24, 28)
group2 <- c(18, 20, 23, 25, 29, 31, 35)
test_result <- t.test(group1, group2)
print(test_result)
OUTPUT
data: group1 and group2
t = -2.6907, df = 12.712, p-value = 0.01913
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
-12.018259 -1.381741
sample estimates:
mean of x mean of y
19.57 25.86

4)
set.seed(42)
group1 <- rnorm(n = 30, mean = 100, sd = 15)
group2 <- rnorm(n = 30, mean = 110, sd = 15)
test_result <- t.test(group1, group2)
print(test_result)
OUTPUT
data: group1 and group2
t = -2.3498, df = 57.669, p-value = 0.02265
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
-18.613644 -1.438116
sample estimates:
mean of x mean of y
99.25624 109.53361

5)
x <- rnorm(50, mean = 10, sd = 2
t.test(x, conf.level = 0.95)$conf.int
OUTPUT
[1] 9.316029 10.403146
attr(,"conf.level")
[1] 0.95


========================================================================================================================================


Ex No:11
Testing of hypothesis (z-test)


1) library(BSDA)
#enter IQ levels for 20 pa ents
data = c(88, 92, 94, 94, 96, 97, 97, 97, 99, 99, 105, 109, 109, 109, 110, 112, 112, 113, 114, 115) #perform one sample z-test
z.test(data, mu=100, sigma.x=15)
OUTPUT:
One-sample z-Test
data: data
z = 1.4633, p-value = 0.1434
alternative hypothesis: true mean is not equal to 100
95 percent confidence interval:
99.26324 107.53676
sample estimates:
mean of x
103.4

2) library(BSDA)
#enter IQ levels for 20 individuals from each city
cityA = c(82, 84, 85, 89, 91, 91, 92, 94, 99, 99, 105, 109, 109, 109, 110, 112, 112, 113, 114, 114) cityB = c(90, 91, 91, 91, 95, 95, 99, 99, 108, 109, 109, 114, 115, 116, 117, 117, 128, 129, 130, 133)
#perform two sample z-test
z.test(x=cityA, y=cityB, mu=0, sigma.x=15, sigma.y=15)
OUTPUT:
Two-sample z-Test
data: cityA and cityB
z = -4.0658, p-value = 4.826e-05
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
-16.22778 -5.77222
sample estimates:
mean of cityA mean of cityB
102.35 110.80

========================================================================================================================================

Ex No:9
Visualizing

Code:

# Binomial distribution
y <- c(0:10)
x <- c(dbinom(0:10,100,0.03))
plot(x,y,type="b",lwd=5,col="red")
points(x,y,pch=10)

# Poisson distribution
a<-c(5:8)
b<-dpois(5:8,5)
plot(a,b,type ="c",lwd=5,col=rainbow(length(a))) points(a,b,pch=10,col=rainbow(length(b)))

#Normal distribution
#distribution with a mean of 0 and a standard deviation of 1: x <- seq(-4, 4, by = 0.2)
y <- dnorm(x, mean = 0, sd = 1) plot(x, y, type = "h")

#normal distribution:
q <- seq(from = -5, to = 5, by = 0.1)
norm_dat <- data.frame(q = q, cdf = pnorm(q)) ggplot(norm_dat) + geom_line(aes(x = q, y = cdf))

#You can also visualize the shape of the quantile function:
p <- seq(from = 0.01, to = 0.99, by = 0.01)
norm_dat <- data.frame(p = p, quantile = qnorm(p))
ggplot(norm_dat) + geom_line(aes(x = p, y = quantile))


========================================================================================================================================


Ex No: 12
CORRELATION COEFFICIENT USING TWO VARIABLES AIM

CODING

1. #correlation coefficient
#R program to illustrate pearson Correlation Testing using cor.test()
x=c(1,2,3,4,5,6,7)
y=c(1,3,6,2,7,4,5)
result=cor.test(x,y,method="pearson")
print(result)

2. Calculate the Correlation Coefficient
x=c(10,14,18,22,26,30)
y=c(18,12,24,6,30,36)
result=cor.test(x,y,method="pearson")
print(result)

3. Find the Correlation Coefficient
x=c(65,66,67,67,68,69,70,72)
y=c(67,68,65,68,72,72,69,71)
result=cor.test(x,y,method="pearson")
print(result)


========================================================================================================================================


Ex No: 13
CORRELATION COEFFICIENT – SCATTER PLOT


CODING

library(ggplot2)
library(corrplot)
library(Hmisc)
data("mtcars")

#Calculate correlation with significance levels
cor_test<-rcorr(as.matrix(mtcars[,c("mpg","wt","hp","disp")]),type="pearson")
cor_test$r
print(cor_test$r)

#scatter plot with a regression line
ggplot(mtcars,aes(x=wt,y=mpg))+
geom_point(color="red",size=3)+
geom_smooth(method="lm", color="purple", se=FALSE)+
labs(title="Scatter plot with Pearson Correlation",
x="Weight(wt)",y="Miles Per Gallon(mpg)")+
theme_minimal()

#Covariance and Correlation in R programming
x<-c(1,3,5,10)
y<-c(2,4,6,20)
print(cov(x,y))
print(cov(x,y,method="pearson"))

#Method of least square in R
df<-data.frame(hours=c(1,2,4,5,5,6,6,7,8,10,11,11,12,12,14),
score=c(64,66,76,73,74,81,83,82,80,88,84,82,91,93,89))
head(df)
model<-lm(score~hours,data=df)
summary(model)
ExamScore=65.334+1.982*5
print(ExamScore)
plot(df$hours,df$score,pch=16,col='steelblue')
abline(model)

#Residual plots in R
data(mtcars)
model<-lm(mpg~disp+hp,data=mtcars)
res<-resid(model)
plot(fitted(model),res)
abline(0,0)
